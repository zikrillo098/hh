import sqlite3
from bs4 import BeautifulSoup
import requests
from aiogram import executor, Bot, Dispatcher, types
from aiogram.types import Message, CallbackQuery
from aiogram.utils import exceptions
import asyncio
from keyboards import generate_phone_number, generate_accept

bot = Bot('6211196143:AAFE4Y9SpCnC-Qc3XMEB8SkGzDN1mzOun30', parse_mode='HTML')
dp = Dispatcher(bot)


@dp.message_handler(commands=['start'])
async def command_start(message: types.Message):
    chat_id = message.chat.id

    db = sqlite3.connect('users_hh.db')
    cursor = db.cursor()

    cursor.execute('''
    SELECT * FROM users_h WHERE telegram_id = ?  
    ''', (chat_id,))
    user = cursor.fetchone()
    if user:
        await bot.send_message(chat_id, f'–í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã –ó–∞—Ä–∞–±–æ—Ç–∞–µ–º —Å–µ–≥–æ–¥–Ω—è –ª—è–º –∞ –†–æ–¥–Ω–æ–π {message.chat.username}',
                               reply_markup=generate_accept())
    else:
        emoji = ['% –∫—Ä—É—Ç–æ–π! –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞–º –∏ —Å—Ç–∞–Ω—å—Ç–µ —á–∞—Å—Ç—å—é –Ω–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞!üòé',
                 '% –∫—Ä—É—Ç–æ–π! –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—å—Ç–µ—Å—å –∫ –Ω–∞–º –∏ –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –ø—Ä–∏–≤–∏–ª–µ–≥–∏—è–º!üòç',
                 '% –∫—Ä—É—Ç–æ–π!  –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—å—Ç–µ—Å—å –∫ –Ω–∞–º –∏ –Ω–∞—á–Ω–∏—Ç–µ —Å–≤–æ–π –ø—É—Ç—å –∫ —É—Å–ø–µ—Ö—É –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—é —Ü–µ–ª–µ–π!‚úÖ',
                 '% –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—å—Ç–µ—Å—å –∫ –Ω–∞–º –∏ –ø–æ–ª—É—á–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–±—â–∞—Ç—å—Å—è —Å –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–∞–º–∏üéâ',
                 '–ú—ã —É–≤–∞–∂–µ–º –∏ —Ü–µ–Ω–∏–º % üíñ',
                 '–õ—é–¥–∏ –≥–æ–≤–æ—Ä—è—Ç —á—Ç–æ % –∫–∏–∑–ª–∞–Ω–∏ –∞–∂–∞–ª–∏üòé',
                 '–ö—Ä–∞—Å–∞–≤—á–∏–∫üòç',
                 '–î–µ—Ä–∑–æ—Å—Ç—å –≤ —Ç–≤–æ–µ–π –∫—Ä–æ–≤–∏‚úÖ',
                 '–õ—é—å–∏ –∏ –≤–ª—é–±–ª—è–π—Å—èüéâ',
                 '–°–µ—Ä–¥–µ—á–∫–æ % –≤ –ø–æ–¥–∞—Ä–æ–∫üíñ']
        timer = len(emoji)
        await bot.send_message(chat_id, f'''–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –±–æ—Ç —É–≤–∞–∂–∞–µ–º—ã–π <b>{message.from_user.username}</b> \n\n 
–¢—É—Ç –≤—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –∫—É—á—É –≤–∞–∫–∞–Ω—Å–∏–π —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∫–æ—Ç–æ—Ä–∞—è –∑–∞–π–º–µ—Ç –≤—Å–µ–≥–æ 10 —Å–µ–∫—É–Ω–¥''')
        sent_message = await bot.send_message(chat_id,
                                              f'''–í—ã –∫—Ä—É—Ç–æ–π! –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ –Ω–∞–º –∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –º–∏—Ä –Ω–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π! {message.from_user.username} \n\n 
–£–∂–µ –æ—Å—Ç–∞–ª–æ—Å—å –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç–∞ –∑–∞ 10 —Å–µ–∫—É–Ω–¥))''')
        while timer > 0:
            await asyncio.sleep(1)
            timer -= 1
            await sent_message.edit_text(
                f''' –û—Å—Ç–∞–ª–æ—Å—å {timer} —Å–µ–∫—É–Ω–¥ {emoji[timer].replace('%', message.from_user.username)}''')
            if timer == 0:
                await sent_message.delete()
                await bot.send_message(chat_id, f'''–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ''',
                                       reply_markup=generate_phone_number())


@dp.message_handler(content_types=['contact'])
async def create_user(message: Message):
    chat_id = message.chat.id
    full_name = message.chat.full_name
    if message.from_user.username:
        username = message.chat.username
    else:
        username = None
    phone = message.contact.phone_number

    db = sqlite3.connect('users_hh.db')
    cursor = db.cursor()
    try:
        cursor.execute('''
        INSERT INTO users_h(telegram_id, username, phone) VALUES (?, ?, ?)
        ''', (chat_id, username, phone))
        db.commit()
        await bot.send_message(chat_id, '–°–ø–∞—Å–∏–±–æ –±–æ–ª—å—à–æ–µ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é', reply_markup=generate_accept())
    except Exception as E:
        await bot.send_message(chat_id, f'{E}')


@dp.message_handler(lambda message: '–ü–æ–¥–æ–±—Ä–∞—Ç—å —Ä–∞–±–æ—Ç—É' in message.text)
async def works(message: Message):
    chat_id = message.chat.id
    await bot.send_message(chat_id,
                           '–ù–∞–ø–∏—à–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ –∫–∞–∫—É—é —Ä–∞–±–æ—Ç—É –∏—â–∏—Ç–µ\n\n –ü—Ä–∏–º–µ—Ä: Python \\ –Ω–æ –æ–Ω –Ω–µ –±—É–¥–µ—Ç –Ω–∏—á–µ–≥–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–∞–∫ –∫–∞–∫ —è –ø–∏—à—É –ø–∞—Ä—Å–µ—Ä')


@dp.message_handler(content_types=['text'])
async def parser(message: Message):
    job = message.text
    chat_id = message.chat.id
    job = str(job)
    url = 'https://hh.ru/search/vacancy'
    params = {'L_save_area': 'true',
              'clusters': 'true',
              'search_field': 'name',
              'area': '1',
              'enable_snippets': 'true',
              'salary': '',
              'st': 'searchVacancy',
              'text': f'{job}',
              'page': '0'
              }
    print(params)
    response = requests.get(url, params=params)
    soup = BeautifulSoup(response.text, 'html.parser')
    vacancy_items = soup.find_all('div', {'class': 'vacancy-serp-item'})
    vacancy = []
    for item in vacancy_items:
        title = item.find('a', {'class': 'serp-item__title'}).text
        print(title)
        company = item.find('a', {'class': 'bloko-link bloko-link_secondary'}).text
        salary = item.find('div', {'class': 'vacancy-serp-item__compensation'})
        vacancy_url = item.find('a', {'class': 'bloko-link'}).get('href')

        if salary:
            salary = salary.text.replace(u'\xa0', u' ')
        else:
            salary = '–ó/–ü –Ω–µ —É–∫–∞–∑–∞–Ω–∞'
        vacancy.append(f'–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ {title}\n–ö–æ–º–ø–∞–Ω–∏—è: {company}\n–ó–∞—Ä–ø–ª–∞—Ç–∞: {salary}\n---\n{vacancy_url}')
        print(vacancy)
    await bot.send_message(chat_id, vacancy)


executor.start_polling(dp, skip_updates=True)
